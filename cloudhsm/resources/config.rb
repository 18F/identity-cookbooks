require 'aws-sdk-cloudhsmv2'

resource_name :cloudhsm_config

property :name, String, default: 'create CloudHSM config'
property :config_dir, String, default: '/opt/cloudhsm/etc'
property :customer_ca_crt, String
property :cluster_id, String

# @param [String] cluster_id
# @return [Array<struct Aws::CloudHSMV2::Types::Hsm>]
def describe_cloudhsm_cluster_hsms(cluster_id:)
  current_region = node.fetch('ec2').fetch('placement_availability_zone')[0...-1]
  client = Aws::CloudHSMV2::Client.new(region: current_region)
  res = client.describe_clusters(filters: {clusterIds: [cluster_id]})
  if res.clusters.empty?
    raise KeyError.new("No CloudHSM clusters found with id #{cluster_id.inspect}")
  end
  if res.clusters.length > 1
    raise "Found multiple clusters for id #{cluster_id.inspect}"
  end

  hsms = res.clusters.fetch(0).hsms

  if hsms.empty?
    raise IndexError.new("No HSMs found in cluster #{cluster_id.inspect}")
  end

  hsms
end

action :create do
  config_dir = new_resource.config_dir

  file "#{config_dir}/customerCA.crt" do
    content new_resource.customer_ca_crt
  end

  service 'cloudhsm-client' do
    action :nothing # notify-only
  end

  # For obscure reasons, it is unclear if include_recipe inside a resource is a
  # bad idea
  # https://github.com/chef/chef/issues/4260
  include_recipe 'cloudhsm::client'

  # These are the documented steps for running commands to configure the
  # cloudhsm client:
  #
  #     service cloudhsm-client stop
  #
  #     /opt/cloudhsm/bin/configure -a <cloudhsm_instance_private_ip>
  #
  #     service cloudhsm-client start
  #
  # possible sleep needed
  #
  #     /opt/cloudhsm/bin/configure -m
  #
  # Cluster info is written to:
  #
  #     /opt/cloudhsm/daemon/1/cluster.info
  #

  hsm_list = describe_cloudhsm_cluster_hsms(cluster_id: new_resource.cluster_id)

  current_az = node.fetch('ec2').fetch('placement_availability_zone')

  # find HSM local to AZ if available
  local_hsm = hsm_list.find { |h| h.availability_zone == current_az }
  if local_hsm
    first_hsm_ip = local_hsm.eni_ip
  else
    first_hsm_ip = hsm_list.fetch(0).eni_ip
  end

  # This file was generated by /opt/cloudhsm/bin/configure -a <cloudhsm_instance_ip>
  file "#{config_dir}/cloudhsm_client.cfg" do
    notifies :restart, 'service[cloudhsm-client]'

    content(JSON.pretty_generate({
      'client': {
        'CriticalAlertScript': '',
        'daemon_id': 1,
        'e2e_owner_crt_path': "#{config_dir}/customerCA.crt",
        'log_level': 'INFO',
        'reconnect_attempts': -1,
        'reconnect_interval': 30,
        'socket_type': 'UNIXSOCKET',
        'sslreneg': 0,
        'tcp_port': 1111,
        'workers': 1,
        'zoneid': 0
      },
      'dualfactor': {
        'certificate': 'certificate.crt',
        'dualfactor_ch_ssl_ciphers': 'default',
        'dualfactor_ssl': 'yes',
        'enable': 'no',
        'pkey': 'pkey.pem',
        'port': 2225
      },
      'loadbalance': {
        'enable': 'yes',
        'prefer_same_zone': 'no',
        'relative_idleness_weight': 1,
        'sucess_rate_weight': 1
      },
      'server': {
        'hostname': first_hsm_ip,
        'port': 2223
      },
      'ssl': {
        'CApath': "#{config_dir}/certs",
        'certificate': "#{config_dir}/client.crt",
        'pkey': "#{config_dir}/client.key",
        'server_ch_ssl_ciphers': 'default',
        'server_ssl': 'yes'
      }
    }, indent: '    '))
  end

  cloudhsm_ips = hsm_list.map(&:eni_ip)

  # This file can be regenerated by /opt/cloudhsm/bin/configure -m
  file "#{config_dir}/cloudhsm_mgmt_util.cfg" do
    notifies :restart, 'service[cloudhsm-client]'

    content(JSON.pretty_generate({
      'scard': {
        'certificate': 'cert-sc',
        'enable': 'no',
        'pkey': 'pkey-sc',
        'port': 2225
      },
      'servers': cloudhsm_ips.map { |hsm_ip|
        {
          'CAfile': '',
          'CApath': "#{config_dir}/certs",
          'certificate': "#{config_dir}/client.crt",
          'e2e_encryption': {
            'enable': 'yes',
            'owner_cert_path': "#{config_dir}/customerCA.crt"
          },
          'enable': 'yes',
          'hostname': hsm_ip,
          'name': hsm_ip,
          'pkey': "#{config_dir}/client.key",
          'port': 2225,
          'server_ssl': 'yes',
          'ssl_ciphers': '',
        }
      },
    }, indent: '    '))
  end
end
